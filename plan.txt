План разработки "Coin Flip Betting" на Polkadot (Moonbeam) с интеграцией расширения
1. Определение логики приложения
Пользователь делает ставку (в токенах GLMR).
Расширение Coin Flip использует API Qrypt для генерации случайного числа.
Результат отправляется в смарт-контракт.
Контракт проверяет ставку и выплачивает выигрыш, если пользователь угадал.
2. Технологический стек
Смарт-контракт: Solidity (Moonbeam, EVM-совместимость)
Фронтенд: Next.js (или React)
Браузерное расширение: JavaScript/TypeScript
Бекенд (если нужен): Node.js (NestJS или Express)
Блокчейн-инфраструктура: Moonbeam (Polkadot), MetaMask + ethers.js
API для случайности: Qrypt API
3. Разработка смарт-контракта
Разработка контракта на Solidity:
Функция placeBet(uint256 amount, bool guess) — принимает ставку и выбор (орёл/решка).
Функция resolveBet(address player, bool result) — вызывается бэкендом для завершения игры.
Хранение данных об активных ставках (mapping(address => Bet)).
Контроль средств: баланс контракта, комиссия, лимиты.
Деплой контракта на Moonbeam (Moonbase Alpha для тестов).
4. Интеграция с расширением
Браузерное расширение Coin Flip:
Добавить опцию ставок (интерфейс для ввода суммы и выбора).
Генерация случайного числа через API Qrypt.
Отправка результата на бэкенд или напрямую в смарт-контракт.
Бэкенд (если используем):
Подтверждение ставки.
Отправка результата в смарт-контракт.
5. Подключение к Moonbeam через MetaMask + ethers.js
Использование ethers.js для взаимодействия со смарт-контрактом.
Интеграция MetaMask для подписания транзакций.
Работа с токенами GLMR в Moonbeam.
6. Тестирование и деплой
Локальное тестирование с Hardhat/Foundry.
Деплой на Moonbase Alpha (тестовая сеть).
Проверка безопасности смарт-контракта.
Развёртывание в основной сети Moonbeam.

Детализированные этапы разработки:

1. Подготовка смарт-контракта
   - Создание контракта для ставок на Solidity
   - Функции для приема ставок и выплаты выигрышей
   - Тестирование контракта
   - Деплой на тестовую сеть Moonbase Alpha

2. Доработка расширения Chrome
   - Добавить функцию отправки результата в dApp
   - Добавить интерфейс для подтверждения отправки результата
   - Тестирование коммуникации

3. Разработка фронтенда (Next.js + FSD)
   - Подключение к MetaMask (авторизация)
   - Интерфейс для ставок
   - Интеграция со смарт-контрактом через ethers.js
   - Проверка наличия расширения
   - Прием результатов от расширения
   - История ставок и баланс

4. Интеграция всех компонентов
   - Настройка взаимодействия расширение → dApp
   - Настройка взаимодействия dApp → смарт-контракт
   - Полное тестирование цепочки: ставка → подброс → результат → выплата

5. Тестирование и отладка
   - Тестирование в тестовой сети
   - Проверка всех сценариев
   - Исправление багов

----
План разработки Coin Flip Betting - Отчет о прогрессе
Версия 1.1 | Дата: 15 ноября 2023
Детализированные этапы разработки:
1. Подготовка смарт-контракта
⬜ Создание контракта для ставок на Solidity
⬜ Функции для приема ставок и выплаты выигрышей
⬜ Тестирование контракта
⬜ Деплой на тестовую сеть Moonbase Alpha

2. Доработка расширения Chrome
⬜ Добавить функцию отправки результата в dApp
⬜ Добавить интерфейс для подтверждения отправки результата
⬜ Тестирование коммуникации

3. Разработка фронтенда (Next.js + FSD)
✅ Подключение к кошелькам (авторизация)
Реализовано через AppKit вместо прямой интеграции с MetaMask
✅ Проверка сети и переключение на Moonbase Alpha
✅ Отображение информации о кошельке и балансе
⬜ Интерфейс для ставок
Создан шаблон компонента BetForm, но не интегрирован
⬜ Интеграция со смарт-контрактом через ethers.js
⬜ Проверка наличия расширения
Создан шаблон компонента ExtensionNotification, но не интегрирован
⬜ Прием результатов от расширения
⬜ История ставок и баланс
Отображение баланса реализовано, история ставок - нет

4. Интеграция всех компонентов
⬜ Настройка взаимодействия расширение → dApp
⬜ Настройка взаимодействия dApp → смарт-контракт
⬜ Полное тестирование цепочки: ставка → подброс → результат → выплата
5. Тестирование и отладка
⬜ Тестирование в тестовой сети
⬜ Проверка всех сценариев
⬜ Исправление багов

Текущий прогресс:
Завершено: 3/15 пунктов (20%)
В процессе: 3/15 пунктов (20%)
Не начато: 9/15 пунктов (60%)
Ключевые отличия от первоначального плана:
Подключение к кошелькам: Вместо прямой интеграции с MetaMask используется AppKit, что обеспечивает поддержку большего количества кошельков и улучшает пользовательский опыт.
Архитектура приложения: Строго следуем методологии Feature-Sliced Design (FSD), что делает код более модульным и поддерживаемым.
Управление состоянием: Используем wagmi и React Query для управления состоянием Web3, что упрощает работу с блокчейном.
Следующие шаги:
Интеграция компонентов ставок и проверки расширения в основной интерфейс приложения.
Разработка смарт-контракта для приема ставок и выплаты выигрышей.
3. Настройка взаимодействия между фронтендом и смарт-контрактом через ethers.js.
Интеграция с расширением Chrome для получения результатов подбрасывания монеты.
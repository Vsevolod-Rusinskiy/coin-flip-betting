"use client";

import { type FC, useState } from "react";
import { type HomePageProps } from "../model/types";
import {
  ConnectButton,
  NetworkWarning,
  useWalletStatus,
} from "@features/connect-wallet";
import { WalletInfo } from "@entities/wallet";
import BetForm from "@features/make-bet/ui/bet-form";
import { ethers } from "ethers";
import { CONTRACT_ADDRESS, CONTRACT_ABI } from "@/app/config/contract-config";

export const HomePage: FC<HomePageProps> = () => {
  const { isConnected, isCorrectNetwork } = useWalletStatus();
  const canPlay = isConnected && isCorrectNetwork;
  const [betResult, setBetResult] = useState<{
    choice: boolean;
    result: boolean;
  } | null>(null);


  const handlePlaceBet = async (amount: string) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
      const choice = await getCoinFlipResult();
      console.log("–ü–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫ (choice):", choice ? "–û—Ä—ë–ª" : "–†–µ—à–∫–∞");

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º wagmi –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
      await window.ethereum.request({ method: "eth_requestAccounts" });
      const web3Provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await web3Provider.getSigner();
      const contract = new ethers.Contract(
        CONTRACT_ADDRESS,
        CONTRACT_ABI,
        signer
      );

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount –≤ wei
      const betAmount = ethers.parseEther(amount);
      console.log("–†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É:", betAmount.toString(), "wei");

      // –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
      const tx = await contract.placeBet(choice, { value: betAmount });
      await tx.wait();
      console.log("–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞");

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = await getCoinFlipResult();
      console.log("–í—Ç–æ—Ä–æ–π –±—Ä–æ—Å–æ–∫ (result):", result ? "–û—Ä—ë–ª" : "–†–µ—à–∫–∞");

      // –†–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç–∞–≤–∫—É –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
      const resolveTx = await contract.resolveBet(result);
      await resolveTx.wait();
      console.log("–°—Ç–∞–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setBetResult({ choice, result });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏:", error);
    }
  };

  const getCoinFlipResult = async () => {
    return new Promise<boolean>((resolve, reject) => {
      const EXTENSION_ID = "gbnopckdabbbomnobanhcfhmonhehaea";

      if (typeof chrome === "undefined" || !chrome.runtime) {
        reject("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Chrome –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
        return;
      }

      chrome.runtime.sendMessage(
        EXTENSION_ID,
        { action: "flip" },
        (response) => {
          if (chrome.runtime.lastError) {
            reject(chrome.runtime.lastError);
            return;
          }

          if (response && response.success) {
            resolve(response.result);
          } else {
            reject("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è");
          }
        }
      );
    });
  };

  return (
    <main className="min-h-screen p-4">
      <div className="container mx-auto max-w-2xl">
        <div className="flex justify-end mb-4">
          <ConnectButton />
        </div>
        <NetworkWarning />
        <h1 className="text-4xl font-bold text-center mb-8">
          Coin Flip Betting
        </h1>

        {canPlay ? (
          <>
            <WalletInfo betResult={betResult}/>
            {typeof chrome !== "undefined" && chrome.runtime ? (
              <>
                <BetForm onPlaceBet={handlePlaceBet} />
                {betResult && (
                  <div className="mt-4 p-4 bg-white rounded-lg shadow-md text-gray-800">
                    <h3 className="text-lg font-semibold mb-2">
                      –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏:
                    </h3>
                    <p>–í–∞—à –±—Ä–æ—Å–æ–∫: {betResult.choice ? "–û—Ä—ë–ª" : "–†–µ—à–∫–∞"}</p>
                    <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: {betResult.result ? "–û—Ä—ë–ª" : "–†–µ—à–∫–∞"}</p>
                    <p
                      className={`font-bold ${
                        betResult.choice === betResult.result
                          ? "text-green-600"
                          : "text-red-600"
                      }`}
                    >
                      {betResult.choice === betResult.result
                        ? "–ü–æ–±–µ–¥–∞! üéâ"
                        : "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üò¢"}
                    </p>
                  </div>
                )}
              </>
            ) : (
              <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
                <p className="text-center text-gray-600 mb-4">
                  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Chrome Coin Flip –¥–ª—è –∏–≥—Ä—ã
                </p>
              </div>
            )}
          </>
        ) : (
          <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
            <p className="text-center text-gray-600 mb-4">
              {isConnected
                ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å"
                : "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É"}
            </p>
          </div>
        )}
      </div>
    </main>
  );
};


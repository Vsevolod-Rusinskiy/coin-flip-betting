"use client";

import { type FC, useState, useEffect } from "react";
import { useAccount, useBalance } from "wagmi";
import { modal } from "@/context";

export const ConnectButton: FC = () => {
  console.log("üîç –†–µ–Ω–¥–µ—Ä ConnectButton");

  const { address, isConnected, status } = useAccount();
  const { data: balance } = useBalance({
    address,
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    console.log("üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:", status);
    if (status === "connecting") {
      console.log("üîÑ –ù–∞—á–∞–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLoading = true");
      setIsLoading(true);
    } else {
      console.log(
        "üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞",
        status,
        ", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLoading = false"
      );
      setIsLoading(false);
    }
  }, [status]);

  const handleConnect = async () => {
    console.log("üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞");
    setError(null);
    setIsLoading(true);
    try {
      console.log("üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å AppKit Modal");
      await modal.open();
      console.log("‚úÖ AppKit Modal —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:", error);
      setError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    } finally {
      console.log(
        "üîç –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLoading = false"
      );
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–µ—Ç–∏
  const handleOpenNetworkModal = async () => {
    console.log("üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Ç–∏");
    try {
      console.log("üîç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–µ—Ç–µ–π");
      await modal.open({ view: "Networks" });
      console.log("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–µ—Ç–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ç–µ–π:", error);
    }
  };

  console.log("üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ ConnectButton:", {
    isConnected,
    status,
    address: address
      ? `${address.slice(0, 6)}...${address.slice(-4)}`
      : undefined,
    isLoading,
    error,
  });

  if (isConnected && address) {
    console.log("‚úÖ –†–µ–Ω–¥–µ—Ä: –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω");
    return (
      <div className="flex flex-col items-end">
        <button
          onClick={handleConnect}
          className={`px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors mb-2 ${
            isLoading ? "opacity-70" : ""
          }`}
          disabled={isLoading}
        >
          {isLoading
            ? "–ó–∞–≥—Ä—É–∑–∫–∞..."
            : `${address.slice(0, 6)}...${address.slice(-4)}`}
        </button>
        <div className="flex flex-col">
          {balance && (
            <div className="text-sm text-gray-600">
              {parseFloat(balance.formatted).toFixed(4)} {balance.symbol}
            </div>
          )}
          <button
            onClick={handleOpenNetworkModal}
            className="text-xs text-blue-500 hover:text-blue-700 mt-1"
          >
            –°–º–µ–Ω–∏—Ç—å —Å–µ—Ç—å
          </button>
        </div>
      </div>
    );
  }

  console.log("üîç –†–µ–Ω–¥–µ—Ä: –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
  return (
    <div className="flex flex-col items-end">
      <button
        onClick={handleConnect}
        className={`px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors ${
          isLoading ? "opacity-70" : ""
        }`}
        disabled={isLoading}
      >
        {isLoading ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..." : "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"}
      </button>
      {error && <div className="text-red-500 text-sm mt-1">{error}</div>}
    </div>
  );
};
